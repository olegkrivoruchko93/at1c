#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаголовокФормы = НСтр("ru = 'Формирование прихода %ВерсияОбработки% '");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%ВерсияОбработки%", ВерсияОбработкиСтрокойНаСервере());
	
	Заголовок = ЗаголовокФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.НадписьКоличествоОтметок.Заголовок  = "Отмечено 0 из 0 на сумму 0 от 0";
	Элементы.НадписьИтого.Заголовок = "Всего 0 на сумму 0";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

 &НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновлениеТекстаНадписей();
	
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПроверкаСроковПоступления

&НаКлиенте
Процедура ПроверкаСроковПоступленияПриИзменении(Элемент)
	
	ОбновлениеТекстаНадписей();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура Заполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) ИЛИ НЕ ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		Поле = ?(ЗначениеЗаполнено(Объект.НачалоПериода), "КонецПериода", "НачалоПериода");
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан период", , Поле, "Объект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не указан период", , "Организация", "Объект",);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Режим = РежимДиалогаВопрос.ДаНет; 
		Ответ = Ждать ВопросАсинх("Табличная часть будет очищена. Продолжить?", Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Объект.Товары.Очистить();
	
	ЗаполнитьНаСервере();
	
	СообщитьОРезультатахЗаполнения();
	
	ОбновлениеТекстаНадписей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	// Выберем реализации опт, розн. и комплектации за период
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода" , НачалоДня(Объект.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода" , КонецДня (Объект.КонецПериода));
	Запрос.УстановитьПараметр("ГруппаТовары" , Справочники.Номенклатура.НайтиПоНаименованию("Товары"));
	Запрос.УстановитьПараметр("ВалютаРеглУчета" , мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Организация" , Объект.Организация);
	Запрос.УстановитьПараметр("ВидОперации" , Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Дата КАК Дата,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Коэффициент КАК Коэффициент,
	|	ВложенныйЗапрос.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапрос.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапрос.ВалютаДокумента КАК ВалютаДокумента,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номер КАК НомерДокумента,
	|	ВложенныйЗапрос.КурсВзаиморасчетов КАК КурсВзаиморасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Реализация.Ссылка.Дата КАК Дата,
	|		Реализация.Ссылка.Организация КАК Организация,
	|		Реализация.Номенклатура КАК Номенклатура,
	|		Реализация.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|		ВЫБОР
	|			КОГДА Реализация.Номенклатура.Родитель.Родитель <> &ГруппаТовары
	|				ТОГДА Реализация.Номенклатура.Родитель.Родитель
	|			ИНАЧЕ Реализация.Номенклатура.Родитель
	|		КОНЕЦ КАК НоменклатурнаяГруппа,
	|		Реализация.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Реализация.Коэффициент КАК Коэффициент,
	|		Реализация.Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА Реализация.Ссылка.СуммаВключаетНДС
	|				ТОГДА Реализация.Сумма
	|			ИНАЧЕ Реализация.Сумма + Реализация.СуммаНДС
	|		КОНЕЦ КАК Сумма,
	|		Реализация.НомерГТД КАК НомерГТД,
	|		Реализация.СтранаПроисхождения КАК СтранаПроисхождения,
	|		Реализация.Ссылка КАК Ссылка,
	|		Реализация.Ссылка.Номер КАК Номер,
	|		Реализация.Ссылка.КурсВзаиморасчетов КАК КурсВзаиморасчетов
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Реализация
	|	ГДЕ
	|		Реализация.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НЕ Реализация.Ссылка.ПометкаУдаления
	|		И НЕ Реализация.Номенклатура.Услуга
	|		И Реализация.Ссылка.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхПродажах.Ссылка.Дата,
	|		ОтчетОРозничныхПродажах.Ссылка.Организация,
	|		ОтчетОРозничныхПродажах.Номенклатура,
	|		ОтчетОРозничныхПродажах.Ссылка.ВалютаДокумента,
	|		ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.Номенклатура.Родитель.Родитель <> &ГруппаТовары
	|				ТОГДА ОтчетОРозничныхПродажах.Номенклатура.Родитель.Родитель
	|			ИНАЧЕ ОтчетОРозничныхПродажах.Номенклатура.Родитель
	|		КОНЕЦ,
	|		ОтчетОРозничныхПродажах.Номенклатура.ЕдиницаИзмерения,
	|		1,
	|		ОтчетОРозничныхПродажах.Количество,
	|		ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажах.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетОРозничныхПродажах.Сумма
	|			ИНАЧЕ ОтчетОРозничныхПродажах.Сумма + ОтчетОРозничныхПродажах.СуммаНДС
	|		КОНЕЦ,
	|		ОтчетОРозничныхПродажах.НомерГТД,
	|		ОтчетОРозничныхПродажах.СтранаПроисхождения,
	|		ОтчетОРозничныхПродажах.Ссылка,
	|		ОтчетОРозничныхПродажах.Ссылка.Номер,
	|		ОтчетОРозничныхПродажах.Ссылка.КурсДокумента
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажах
	|	ГДЕ
	|		ОтчетОРозничныхПродажах.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НЕ ОтчетОРозничныхПродажах.Ссылка.ПометкаУдаления
	|		И НЕ ОтчетОРозничныхПродажах.Номенклатура.Услуга
	|		И ОтчетОРозничныхПродажах.Ссылка.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Комплектация.Ссылка.Дата,
	|		Комплектация.Ссылка.Организация,
	|		Комплектация.Номенклатура,
	|		&ВалютаРеглУчета,
	|		ВЫБОР
	|			КОГДА Комплектация.Номенклатура.Родитель.Родитель <> &ГруппаТовары
	|				ТОГДА Комплектация.Номенклатура.Родитель.Родитель
	|			ИНАЧЕ Комплектация.Номенклатура.Родитель
	|		КОНЕЦ,
	|		Комплектация.Номенклатура.ЕдиницаИзмерения,
	|		1,
	|		Комплектация.Количество,
	|		Комплектация.Сумма,
	|		Комплектация.НомерГТД,
	|		Комплектация.СтранаПроисхождения,
	|		Комплектация.Ссылка,
	|		Комплектация.Ссылка.Номер,
	|		1
	|	ИЗ
	|		Документ.КомплектацияНоменклатуры.Комплектующие КАК Комплектация
	|	ГДЕ
	|		Комплектация.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И НЕ Комплектация.Ссылка.ПометкаУдаления
	|		И НЕ Комплектация.Номенклатура.Услуга
	|		И Комплектация.Ссылка.Организация = &Организация) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.СтранаПроисхождения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.НомерГТД,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ВалютаДокумента,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.Дата,
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номер,
	|	ВложенныйЗапрос.Номенклатура.НоменклатурнаяГруппа,
	|	ВложенныйЗапрос.КурсВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Дата"; 
	
	ТаблицаРасходов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРасходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Выберем поступ., возвраты и комплектации за период
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Поступление.Номенклатура КАК Номенклатура,
	|	Поступление.Ссылка.Дата КАК Дата,
	|	Поступление.Количество КАК Количество,
	|	Поступление.Ссылка.СуммаДокумента КАК Стоимость,
	|	Поступление.Ссылка.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК Поступление
	|ГДЕ
	|	Поступление.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Поступление.Ссылка.ПометкаУдаления
	|	И НЕ Поступление.Номенклатура.Услуга
	|	И Поступление.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратОтПокупателя.Номенклатура,
	|	ВозвратОтПокупателя.Ссылка.Дата,
	|	ВозвратОтПокупателя.Количество,
	|	ВозвратОтПокупателя.Ссылка.СуммаДокумента,
	|	ВозвратОтПокупателя.Ссылка.Организация
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратОтПокупателя
	|ГДЕ
	|	ВозвратОтПокупателя.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ ВозвратОтПокупателя.Ссылка.ПометкаУдаления
	|	И НЕ ВозвратОтПокупателя.Номенклатура.Услуга
	|	И ВозвратОтПокупателя.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Комплектация.Номенклатура,
	|	Комплектация.Дата,
	|	Комплектация.Количество,
	|	Комплектация.СуммаДокумента,
	|	Комплектация.Организация
	|ИЗ
	|	Документ.КомплектацияНоменклатуры КАК Комплектация
	|ГДЕ
	|	Комплектация.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Комплектация.Ссылка.ПометкаУдаления
	|	И НЕ Комплектация.Номенклатура.Услуга
	|	И Комплектация.Организация = &Организация
	|	И Комплектация.ВидОперации = &ВидОперации
	|ИТОГИ ПО
	|	Номенклатура";
	
	ДеревоПриходов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Сформируем структура отбора данных при формировании запроса по номенклатуре
	МассивНоменклатуры = ТаблицаРасходов.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	ТаблицаОстатков = ПолучитьОстаткиТоваров(Объект.Организация, МассивНоменклатуры, НачалоДня(Объект.НачалоПериода) + 1);
	
	ТаблицаНеСписанныхПартии = ТаблицаРасходов.Скопировать();
	ТаблицаНеСписанныхПартии.Очистить();
	
	// Цикл обходит всю номенклатуру из таблицы расходов внутри этого цикла сначала
	// "не списанный остаток" уменьшается на количество имеющихся остатков на складе
	// затем на количество по не проведенным документам 
	Для Каждого СтрокаДокумента Из ТаблицаРасходов Цикл
		
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество; 
		
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаДокумента.Номенклатура);
		СтрокаОстатковНоменклатуры = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокаОстатковНоменклатуры[0].Количество >= КоличествоОсталосьПогасить Тогда
			КоэффСписания = КоличествоОсталосьПогасить / СтрокаОстатковНоменклатуры[0].Количество;
		Иначе
			КоэффСписания = 1;
		КонецЕсли;
	
		Количество = Окр(СтрокаОстатковНоменклатуры[0].Количество * КоэффСписания,3,1);
		
		КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
		СтрокаОстатковНоменклатуры[0].Количество = СтрокаОстатковНоменклатуры[0].Количество - Количество;
		
		// Второе списание из приходов, которые еще не проведены
		// второй - по дереву приходов, с учетом времени прихода, чтобы прих был раньше расхода
		НайденныеСтроки = ДеревоПриходов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Для каждого СтрокаПартии Из НайденныеСтроки Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаПартии.Уровень() = 0 Тогда
				Продолжить; //итоги
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПартии.Количество) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаПартии.Дата > СтрокаДокумента.Дата Тогда
				Продолжить; //приход пришел позже текущей реал
			КонецЕсли; 
			
			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Количество = Окр(СтрокаПартии.Количество * КоэффСписания, 3, 1);
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
			СтрокаПартии.Количество = СтрокаПартии.Количество - Количество;
		КонецЦикла;	//Для каждого СтрокаПартии Из НайденныеСтроки
		
		// Не списанное количество добавим отдельной строкой 
		// в таблицу списанных партий.
		Если КоличествоОсталосьПогасить > 0  Тогда
			
			// В таблицу списанных партий записывается строка с информацией.
			СтрокаНеСписаннаяПартия = ТаблицаНеСписанныхПартии.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНеСписаннаяПартия, СтрокаДокумента);
			
			КоэффСписания = КоличествоОсталосьПогасить / СтрокаНеСписаннаяПартия.Количество;
			
			//пересчитаем валюту
			Стоимость = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаНеСписаннаяПартия.Сумма,
															   СтрокаНеСписаннаяПартия.ВалютаДокумента,
															   мВалютаРегламентированногоУчета, 
															   СтрокаНеСписаннаяПартия.Дата);
			
			СтрокаНеСписаннаяПартия.Сумма = Стоимость * КоэффСписания;
			СтрокаНеСписаннаяПартия.ВалютаДокумента = мВалютаРегламентированногоУчета;
			СтрокаНеСписаннаяПартия.КурсВзаиморасчетов = 1;
			СтрокаНеСписаннаяПартия.Количество = КоличествоОсталосьПогасить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Не используем гтд и страну
	ТаблицаНеСписанныхПартии.Свернуть("Номенклатура, НоменклатурнаяГруппа, ВалютаДокумента, ЕдиницаИзмерения, Коэффициент, Ссылка, НомерДокумента, Дата", "Количество, Сумма");
	Объект.Товары.Загрузить(ТаблицаНеСписанныхПартии);
	
	ЗаполнитьТЧПроверкаСроковПоступления(ДеревоПриходов);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПроцентНаценки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не заполнена наценка!", ,"ПроцентНаценки", "Объект",);
		Возврат;
	КонецЕсли;
		
	Если Объект.Товары.Количество() = 0 ИЛИ НЕ ЕстьДокументыКОбработке() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Нет отмеченных и необработанных строк для заполнения документа!", , "Товары", "Объект",);
		Возврат;
	КонецЕсли;
	
	ОткрываемаяФорма = ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаТовары", Новый Структура("Контрагент", Объект.Контрагент));
	ДанныеФормы = ОткрываемаяФорма.Объект; // Получаем объект формы в переменную
	
	ЗаполнитьДокументНаСервере(ДанныеФормы); // Заполняем документ на сервере
	
	КопироватьДанныеФормы(ДанныеФормы, ОткрываемаяФорма.Объект); // копируем наш объект в объект формы
	
	
	Для Каждого Товара Из ОткрываемаяФорма.Объект.Товары Цикл
		Товара.Всего = Товара.Сумма;
	КонецЦикла;

	ОткрываемаяФорма.ТребуетсяСчетФактура = Истина;
	ОткрываемаяФорма.Объект.ЭтоУниверсальныйДокумент = Ложь;
	ОткрываемаяФорма.ПлательщикНДС = Истина;
	ОткрываемаяФорма.ПрименениеУСН = Ложь;
	ОткрываемаяФорма.ПрименениеУСНДоходы = Ложь;
		
	ОткрываемаяФорма.ОбновитьИтогиНаСервере();
	
	ОткрываемаяФорма.УстановитьУсловноеОформлениеДокумента();
	
	ОбновитьЗначениеРеквизитаОбработали(Объект);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьПометкуСтрокТаблицы(ЭтотОбъект, Истина);
	
	ОбновлениеТекстаНадписей();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	УстановитьПометкуСтрокТаблицы(ЭтотОбъект, Ложь);
	
	ОбновлениеТекстаНадписей();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтметитьПоГруппам(Команда)
	
	МассивНоменклатурныхГрупп = Новый Массив;
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если НЕ СтрокаТаблицы.Обработали Тогда
		    МассивНоменклатурныхГрупп.Добавить(СтрокаТаблицы.НоменклатурнаяГруппа);
		КонецЕсли;
	КонецЦикла;
		
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатурныхГрупп, Истина);
    СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(МассивНоменклатурныхГрупп);
	
	Для каждого ЭлементСписка Из СписокВыбора Цикл
		Если НЕ ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
		    Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	СписокВыбора.СортироватьПоПредставлению();
	
	СписокВыбора.ЗаполнитьПометки(Ложь);
	
	ВыбранныеГруппы = СписокВыбора.ОтметитьЭлементыАсинх("Отметьте группы для обработки");	
	
	Рез = Ждать ВыбранныеГруппы;
	
	Если ТипЗнч(Рез) = Тип("СписокЗначений") Тогда
		Для каждого Элемент Из СписокВыбора Цикл
			Если Элемент.Пометка Тогда
				Для каждого СтрокаТаблицы Из Объект.Товары Цикл
					Если СтрокаТаблицы.НоменклатурнаяГруппа = Элемент.Значение 
						И НЕ СтрокаТаблицы.Обработали Тогда
						СтрокаТаблицы.Пометка = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновлениеТекстаНадписей();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтработали(Команда)
	
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		СтрокаТаблицы.Обработали = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Убираем из таблицы строки, которые уже отработаны или без пометки
// 
// Возвращаемое значение: ТаблицаЗначений - Таблица значений из табличной части обработки
Функция ПолучитьТаблицуТоваровИзТЧОбработки()
	
	ТаблицаПоТоварам = Объект.Товары.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварам.Получить(Сч);
		Если НЕ СтрокаТаблицы.Пометка ИЛИ СтрокаТаблицы.Обработали Тогда 
			ТаблицаПоТоварам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ТаблицаПоТоварам; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеРеквизитаОбработали(Объект)
	
	// Устанавливаем отметку "Отработали"  
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если НЕ СтрокаТаблицы.Пометка ИЛИ СтрокаТаблицы.Обработали Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.Обработали = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаименьшаяДатаДокументовТабличнойЧасти(Объект)
	
	// Пытаемся определить первую реал в день начала
	ПромТаб = Объект.Товары.Выгрузить();
	ПромТаб.Сортировать("Дата ВОЗР");
	// Уст. меньшее время
	Дельта = ТекущаяДата() - НачалоЧаса(ТекущаяДата()); //кол минут и сек с начала часа
	ДатаПрихода = ПромТаб[0].Дата - Дельта; 
	
	Возврат ДатаПрихода; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуСтрокТаблицы(Форма, ЗначениеОтметки)

	Для каждого СтрокаТаблицы Из Форма.Объект.Товары Цикл
		
		СтрокаТаблицы.Пометка = ЗначениеОтметки;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
КонецПроцедуры

// Изменение надписей внизу формы и изменение заголовков страниц формы
//
Процедура ОбновлениеТекстаНадписей()
	
	// Изменение надписей подвала
	СуммаОтметок = 0;
	КолвоОтметок = 0; 
	КолвоСтрок = 0;
	ИтогоСумма = 0;
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если НЕ СтрокаТаблицы.Обработали Тогда
			КолвоСтрок = КолвоСтрок + 1;
			ИтогоСумма = ИтогоСумма + СтрокаТаблицы.Сумма;
			
			Если СтрокаТаблицы.Пометка Тогда
				КолвоОтметок = КолвоОтметок + 1;
				СуммаОтметок = СуммаОтметок + СтрокаТаблицы.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстКолвоОтметок = СтрШаблон("Отмечено %1 из %2 на сумму %3 от %4", КолвоОтметок, КолвоСтрок, СуммаОтметок, ИтогоСумма);
	ТекстИтого = СтрШаблон("Всего %1 на сумму %2", Объект.Товары.Количество(), Объект.Товары.Итог("Сумма"));
	
	Элементы.НадписьКоличествоОтметок.Заголовок = ТекстКолвоОтметок;
	Элементы.НадписьИтого.Заголовок = ТекстИтого;
	
	// Изменение заголовков страниц формы
	Если Объект.Товары.Количество() = 0 Тогда
		Элементы.ГруппаСтраницаТовары.Заголовок = "Товары"
	Иначе
		Элементы.ГруппаСтраницаТовары.Заголовок = СтрШаблон("Товары (%1 поз.)", Объект.Товары.Количество());
	КонецЕсли;
	
	Если Объект.ПроверкаСроковПоступления.Количество() = 0 Тогда
		Элементы.ГруппаПроверкаСроковПоступления.Заголовок = "Проверка сроков поступления"
	Иначе
		Элементы.ГруппаПроверкаСроковПоступления.Заголовок = СтрШаблон("Проверка сроков поступления (%1 поз.)", Объект.ПроверкаСроковПоступления.Количество());
	КонецЕсли;
	
КонецПроцедуры

// Функция - Получить остатки товаров
//
// Параметры:
//  Организация				 - Справочники.Организации - Организация, остатки товаров которой нужно получить.
//  Номенклатура			 - Справочники.Номенклатура - Номенклатура, остатки товаров которой нужно получить. 
//  ДатаПолученияОстатков	 - Дата - Дата, на которую будут получены остатки
// 
// Возвращаемое значение: Таблица значений с колонками "Номенклатура", "Количество" 
&НаСервере
Функция ПолучитьОстаткиТоваров(Организация, Номенклатура, ДатаПолученияОстатков)
	
	ОстаткиТоваров = Новый ТаблицаЗначений;
	ОстаткиТоваров.Колонки.Добавить("Номенклатура");
    ОстаткиТоваров.Колонки.Добавить("Количество");
	
	Запрос = Новый Запрос;
			
	Для каждого Элемент Из Номенклатура Цикл
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК ТекОстаток,
		|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК ТекОстатокДТ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатков,
		|			Счет.Ссылка В ИЕРАРХИИ (&Счет),
		|			,
		|			Субконто1 = &Номенклатура
		|				И Организация = &Организация) КАК ХозрасчетныйОстатки";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Номенклатура", Элемент);
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаПолученияОстатков);
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.Товары);
		
		РезультатЗапроса = Запрос.Выполнить();
				
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			Стр = ОстаткиТоваров.Добавить();
			Стр.Номенклатура = Элемент;
			Стр.Количество = ВыборкаДетальныеЗаписи.ТекОстаток;
	
		Иначе
			
			Стр = ОстаткиТоваров.Добавить();
			Стр.Номенклатура = Элемент;
			Стр.Количество = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОстаткиТоваров;	
	
КонецФункции

// Заполняет объект созданной формы на сервере
//
// Параметры:
//  ДанныеФормы  - Форма.Объект - Объект созданной формы
&НаСервере
Процедура ЗаполнитьДокументНаСервере(ДанныеФормы)
	
	ДокументОбъект = ДанныеФормыВЗначение(ДанныеФормы, Тип("ДокументОбъект.ПоступлениеТоваровУслуг"));
	
	// Заполнение реквизитов документа
	ДатаПрихода = НаименьшаяДатаДокументовТабличнойЧасти(Объект);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Организация", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	ДанныеЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	ДанныеЗаполнения.Вставить("Склад", БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад"));
	ДанныеЗаполнения.Вставить("Контрагент", Объект.Контрагент);  
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	ЗаполнитьРеквизитДоговорКонтрагента(ДокументОбъект);
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
	ДокументОбъект.СуммаВключаетНДС = Истина;
	ДокументОбъект.Дата = ДатаПрихода;
	ДокументОбъект.ЭтоУниверсальныйДокумент = Ложь;
	
	// Заполнение табличной части
	ТаблицаПоТоварам = ПолучитьТаблицуТоваровИзТЧОбработки();
	
	ТаблицаПоТоварам.Свернуть("Номенклатура, Цена, НомерГТД, СтранаПроисхождения, ВалютаДокумента, ЕдиницаИзмерения, Коэффициент", "Количество, Сумма");
	
	ТаблицаПоТоварам.Колонки.Добавить("СтавкаНДС");
	СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ДатаПрихода);
	ТаблицаПоТоварам.ЗаполнитьЗначения(СтавкаНДС, "СтавкаНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		СтоимостьЗакупки = СтрокаТаблицы.Сумма / (100 + Объект.ПроцентНаценки) * 100;
		СтрокаТаблицы.Цена = Окр(СтоимостьЗакупки / СтрокаТаблицы.Количество, 2);
	КонецЦикла;
		
	ДокументОбъект.Товары.Загрузить(ТаблицаПоТоварам);
	
	// Заполнение счетов учета в табличной часте.
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина); 
	СчетаУчетаВДокументах.Заполнить(ДокументОбъект, Отбор);
	
	Для каждого СтрокаТабЧасти Из ДокументОбъект.Товары Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабЧасти);
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабЧасти, Истина);
	КонецЦикла;
	
	// Кладем обратно в объект формы уже созданный документ
	ЗначениеВДанныеФормы(ДокументОбъект, ДанныеФормы); 
	
КонецПроцедуры // ЗаполнитьДокументНаСервере()

// Заполняет реквизит документа ДоговорКонтрагента.Если 
// есть подходящий по виду основной договор, будет подставлен
// он, иначе любой другой, подходящий по виду.
//
// Параметры:
//  ДокументОбъект  - Документ.ПоступлениеТоваровУслуг - Документ ПоступлениеТоваровУслуг
&НаСервере
Процедура ЗаполнитьРеквизитДоговорКонтрагента(ДокументОбъект)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента, Объект.Контрагент, 
	        БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"), СписокВидовДоговоров);

КонецПроцедуры 

// Проверяет, есть ли строки с "Помечено" и не "Обработали",
//  для формирования документа поступления товаров и услуг
//
// Возвращаемое значение:
//   Булево   - Возвращает Истина, если есть строки
// для формирования документа поступления товаров и услуг
&НаКлиенте
Функция ЕстьДокументыКОбработке()
	
	ЕстьНужныеСтроки = Ложь;
	
	Для каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.Пометка И НЕ СтрокаТЧ.Обработали Тогда
			ЕстьНужныеСтроки = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьНужныеСтроки; 
	
КонецФункции

// Сообщает пользователю о результатах работы процедуры ЗаполнитьНаСервере()
//
&НаКлиенте
Процедура СообщитьОРезультатахЗаполнения()

	Если Объект.Товары.Количество() = 0 Тогда
		ПоказатьОповещениеПользователя("Результат заполнения:", ,"Нет товаров для заполнения!",,,)
	Иначе
		
		Для каждого СтрокаТаблицы  Из Объект.Товары Цикл
			
			Если СтрокаТаблицы.Сумма = 0 Тогда
				ТекстСообщения = "Строка " + СтрокаТаблицы.НомерСтроки + " товар " + СтрокаТаблицы.Номенклатура 
				                 + " - не заполнена сумма продажи. Укажите сумму вручную.";
				Поле = СтрШаблон("Товары[%1].Сумма", СтрокаТаблицы.НомерСтроки - 1);
				ОбщегоНазначенияКлиент.
				СообщитьПользователю(ТекстСообщения, , Поле, "Объект");
			КонецЕсли;
			
		КонецЦикла;  
		
	КонецЕсли;

КонецПроцедуры // СообщитьОРезультатахЗаполнения()

// Заполняет ТЧ номенклатурой, которая была добавлена в ТЧ товары и по которой
// на КонецПериода есть остатки (не были списаны из-за того, что приход был позже)
//
// Параметры:
//  ДеревоОстатков  - Дерево значений - не списанные остатки по партиям
//
&НаСервере
Процедура ЗаполнитьТЧПроверкаСроковПоступления(ДеревоПриходов)
	
	Объект.ПроверкаСроковПоступления.Очистить();
	
	Для каждого СтрокаТЧ  Из Объект.Товары Цикл
		
		КоличествоОсталосьПогасить = СтрокаТЧ.Количество;
		
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура);
		
		НайденныеСтроки = ДеревоПриходов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		
		Для Каждого СтрокаПартии Из НайденныеСтроки Цикл
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаПартии.Уровень() = 0 Тогда
				Продолжить; // Итоги
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаПартии.Количество) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;
			
			Количество = Окр(СтрокаПартии.Количество * КоэффСписания, 3, 1);
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
			СтрокаПартии.Количество = СтрокаПартии.Количество - Количество;
			
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить < СтрокаТЧ.Количество Тогда	
			НоваяСтрока = Объект.ПроверкаСроковПоступления.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.Количество = СтрокаТЧ.Количество - КоличествоОсталосьПогасить;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ВерсияОбработкиСтрокойНаСервере()
	
	Возврат РеквизитФормыВЗначение("Объект").ВерсияОбъектаСтрокой();
	
КонецФункции

#КонецОбласти

#Область Инициализация

мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

#КонецОбласти