
&ИзменениеИКонтроль("ВыполнитьПроверку")
Процедура ИБ_ВыполнитьПроверку(СтрокаПроверки, ПараметрыОтчета)

	Если СтрокаПроверки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	Результат = Неопределено;

	// Раздел "Учетная политика"
	Если СтрокаПроверки.Идентификатор = "НаличиеУчП" Тогда
		Результат = ПроверитьНаличиеУчП(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НеизменностьУчП_БУ" Тогда
		Результат = ПроверитьНеизменностьУчП_БУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НеизменностьУчП_НУ" Тогда
		Результат = ПроверитьНеизменностьУчП_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОценкаРозницы" Тогда
		Результат = ПроверитьОценкаРозницы(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ДиректКостингИСчет26" Тогда
		Результат = ПроверитьДиректКостингИСчет26(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПрименениеПБУ18Счета" Тогда
		Результат = ПроверитьПрименениеПБУ18Счета(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетНУприУСН" Тогда
		Результат = ПроверитьНетНУприУСН(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетЕНВД" Тогда
		Результат = ПроверитьНетЕНВД(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НаличиеСложногоНДС" Тогда
		Результат = ПроверитьНаличиеСложногоНДС(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НаличиеСведенийОбОтветственныхЛицах" Тогда
		Результат = ПроверитьНаличиеСведенийОбОтветственныхЛицах(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НастроеноИспользованиеСчетовПроизводства" Тогда
		Результат = ПроверитьНастроеноИспользованиеСчетовПроизводства(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;

	// Раздел "Анализ состояния бухгалтерского учета"
	Если СтрокаПроверки.Идентификатор = "СоответствиеПланаСчетовТиповому" Тогда
		Результат = ПроверитьСоответствиеПланаСчетовТиповому(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОстатковПоСчету000" Тогда
		Результат = ПроверитьНетОстатковПоСчету000(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОстатковПоСчетамПодлежащимЗакрытиюТипа1" Тогда
		Результат = ПроверитьНетОстатковПоСчетамПодлежащимЗакрытиюПоТипуЗакрытия(СтрокаПроверки, ПараметрыОтчета, 1);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОстатковПоСчетамПодлежащимЗакрытиюТипа2" Тогда
		Результат = ПроверитьНетОстатковПоСчетамПодлежащимЗакрытиюПоТипуЗакрытия(СтрокаПроверки, ПараметрыОтчета, 2);
	ИначеЕсли СтрокаПроверки.Идентификатор = "СоответствиеОстатковИАктивностиСчетов" Тогда
		Результат = ПроверитьСоответствиеОстатковИАктивностиСчетов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПереоценкаВалютыНеУказанДокументРасчетовСКонтрагентом" Тогда
		Результат = ПроверитьПереоценкаВалютыПустойДокументРасчетов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПереоценкаВалютыНеУказанаВалюта" Тогда
		Результат = ПроверитьПереоценкаВалютыПустаяВалюта(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПереоценкаВалюты" Тогда
		Результат = ПроверитьПереоценкаВалюты(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "КорректныеКорреспондецииСчетов" Тогда
		Результат = ПроверитьКорректныеКорреспондецииСчетов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаточнаяСтоимостьОС" Тогда
		Результат = ПроверитьОстаточнаяСтоимостьОС(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОкруглениеНачисленияНалогов" Тогда
		Результат = ПроверитьОкруглениеНачисленияНалогов(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;

	// Раздел "Кассовые операции
	Если СтрокаПроверки.Идентификатор = "НепроведенныеПКО_РКО" Тогда
		Результат = ПроверитьНепроведенныеПКО_РКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "МинусыПоКассе" Тогда
		Результат = ПроверитьМинусыПоКассе(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЛимитКассы" Тогда
		Результат = ПроверитьЛимитКассы(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЛимитРасчетовСКонтрагентами" Тогда
		Результат = ПроверитьЛимитРасчетовСКонтрагентами(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НумерацияПКО" Тогда
		Результат = ПроверитьНумерациюПКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НумерацияРКО" Тогда
		Результат = ПроверитьНумерациюРКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ВыдачаПодотчетПослеОтчета" Тогда
		Результат = ПроверитьВыдачаПодотчетПослеОтчета(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ДвижениеВнутри71Счета" Тогда
		Результат = ПроверитьДвижениеВнутри71Счета(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПодотчетТолькоРаботникам" Тогда
		Результат = ПроверитьПодотчетТолькоРаботникам(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;

	// Раздел "Ведение книги продаж по НДС"
	Если СтрокаПроверки.Идентификатор = "ПолнотаСФПоРеализации" Тогда
		Результат = ПроверитьПолнотаСФПоРеализации(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "СвоевременностьСФПоРеализации" Тогда
		Результат = ПроверитьСвоевременностьСФПоРеализации(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "Соответствие90_НДС_БУ" Тогда
		Результат = ПроверитьСоответствие90_НДС_БУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "Соответствие91_НДС_БУ" Тогда
		Результат = ПроверитьСоответствие91_НДС_БУ(СтрокаПроверки, ПараметрыОтчета)
	ИначеЕсли СтрокаПроверки.Идентификатор = "Соответствие90и91_НДС_НУ" Тогда
		Результат = ПроверитьСоответствие90и91_НДС_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЕстьЗаписиКнигиПродаж2012" Тогда
		Результат = ПроверитьЕстьЗаписиКнигиПродаж2012(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НачислениеНДСсАвансов" Тогда
		Результат = ПроверитьНачислениеНДСсАвансов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НДСсАвансовБУ_НУ" Тогда
		Результат = ПроверитьНДСсАвансовБУ_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПолнотаНДСАгенты" Тогда
		Результат = ПроверитьПолнотаНДСАгенты(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НДСсСМРхозспособомВКнигеПродаж" Тогда
		Результат = ПроверитьНДСсСМРхозспособомВКнигеПродаж(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НумерацияСФ" Тогда
		Результат = ПроверитьНумерациюСФ(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;

	// Раздел "Ведение книги покупок по НДС"
	Если СтрокаПроверки.Идентификатор = "ПолнотаСФПолученных" Тогда
		Результат = ПроверитьПолнотаСФПолученных(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЕстьРаспределениеКосвРасходов" Тогда
		Результат = ПроверитьЕстьРаспределениеКосвРасходов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ВсеКосвРасходыРаспределены" Тогда
		Результат = ПроверитьВсеКосвРасходыРаспределены(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЕстьЗаписиКнигиПокупок" Тогда
		Результат = ПроверитьЕстьЗаписиКнигиПокупок(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОтрицательногоНДСПредъявленного" Тогда
		Результат = ПроверитьНетОтрицательногоНДСПредъявленного(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиНДСПредъявленного_БУ_НУ" Тогда
		Результат = ПроверитьОстаткиНДСПредъявленного_БУ_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЕстьВычетНДСсАвансов" Тогда
		Результат = ПроверитьЕстьВычетНДСсАвансов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ВычетНДСсАвансов_БУ_НУ" Тогда
		Результат = ПроверитьВычетНДСсАвансов_БУ_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПроверкаЦепочкиВозвратов" Тогда
		Результат = ПроверитьПравильностьДанныхПоВозвратам(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	#Вставка
	// Раздел "Остатки на счетах"
	Если СтрокаПроверки.Идентификатор = "ОтрицательныеОстаткиНаСчетахБУ" Тогда
		Результат = ПроверитьОтрицательныеОстаткиНаСчетахБУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиСчета10" Тогда
		Результат = ПроверитьОстаткиСчета10(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиСчета19" Тогда
		Результат = ПроверитьОстаткиСчета19(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиСчета41" Тогда
		Результат = ПроверитьОстаткиСчета41(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиСчета60" Тогда
		Результат = ПроверитьОстаткиСчета60(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиСчета62" Тогда                               
		Результат = ПроверитьОстаткиСчета62(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиСчета6802" Тогда                               
		Результат = ПроверитьОстаткиСчета6802(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиСчета76АВ" Тогда
		Результат = ПроверитьОстаткиСчета76АВ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиСчета76ВА" Тогда
		Результат = ПроверитьОстаткиСчета76ВА(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиВзаиморасчетов" Тогда
		Результат = ПроверитьОстаткиВзаиморасчетов(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	// Раздел "Первичные документы"
	Если СтрокаПроверки.Идентификатор = "НеПроведенныеДокументы" Тогда
		Результат = ПроверитьНаличиеНепроведенныхДокументов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПоступлениеТоваровИУслуг" Тогда
		Результат = ПроверитьПоступлениеТоваровИУслуг(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "СчетФактураПолученный" Тогда
		Результат = ПроверитьСчетФактураПолученный(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "СчетФактураВыданный" Тогда
		Результат = ПроверитьСчетФактураВыданный(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	// Раздел "Справочники"
	Если СтрокаПроверки.Идентификатор = "ДублиКонтрагентов" Тогда
		Результат = ПроверитьДублиКонтрагентов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ДублиДоговоров" Тогда
		Результат = ПроверитьДублиДоговоров(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ДублиНоменклатуры" Тогда
		Результат = ПроверитьДублиНоменклатуры(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	#КонецВставки
	
	// Обработка результата

	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		СтрокаПроверки.ПроверкаВыполнена = Истина;
		СтрокаПроверки.ОбнаруженыОшибки  = Результат.Количество() > 0;
		СтрокаПроверки.ТаблицаОшибок     = Результат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Булево") Тогда
		СтрокаПроверки.ПроверкаВыполнена = Истина;
		СтрокаПроверки.ОбнаруженыОшибки  = Результат;
		СтрокаПроверки.ТаблицаОшибок     = Неопределено;
	Иначе // Неопределено
		СтрокаПроверки.ПроверкаВыполнена = Ложь;
		СтрокаПроверки.ОбнаруженыОшибки  = Ложь;
		СтрокаПроверки.ТаблицаОшибок     = Неопределено;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаПроверки.КомментарийРезультата) Тогда
		Если СтрокаПроверки.ПроверкаВыполнена Тогда
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаОшибка;
			Иначе
				СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаНетОшибок;
			КонецЕсли;
		Иначе
			СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаНеВыполнена;
		КонецЕсли;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки 
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.ПричиныОшибокРезультата) Тогда
		СтрокаПроверки.ПричиныОшибокРезультата = СтрокаПроверки.ПричиныОшибок;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки 
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.РекомендацииРезультата) Тогда
		СтрокаПроверки.РекомендацииРезультата = СтрокаПроверки.Рекомендации;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.ГиперссылкаРезультата) Тогда
		СтрокаПроверки.ГиперссылкаРезультата = СтрокаПроверки.ГиперссылкаРекомендаций;
	КонецЕсли;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

// Раздел "Остатки на счетах"

Функция ПроверитьОтрицательныеОстаткиНаСчетахБУ(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК КоличествоДт,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаДт,
	|	ХозрасчетныйОстатки.КоличествоОстатокКт КАК КоличествоКт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(ХозрасчетныйОстатки.СуммаОстатокДт < 0
	|			ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт < 0
	|			ИЛИ ХозрасчетныйОстатки.КоличествоОстатокДт < 0
	|			ИЛИ ХозрасчетныйОстатки.КоличествоОстатокКт < 0)";
	
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьРасшифровку(ТаблицаРезультата, СтрокаПроверки.Идентификатор);
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПроверитьОстаткиСчета10()

Функция ПроверитьОстаткиСчета10(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляСчетовУчетамТМЦ();
	
	Запрос.УстановитьПараметр("СчетРодитель", ПланыСчетов.Хозрасчетный.НайтиПоКоду("10"));
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьРасшифровку(ТаблицаРезультата, СтрокаПроверки.Идентификатор);

	Возврат ТаблицаРезультата;
	
КонецФункции // ПроверитьОстаткиСчета10()

Функция ПроверитьОстаткиСчета19(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	""Отрицательные остатки на активном счете"" КАК ОписаниеОшибки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет.Родитель = &СчетРодитель, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт < 0";
	
	Запрос.УстановитьПараметр("СчетРодитель", ПланыСчетов.Хозрасчетный.НайтиПоКоду("19"));
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьРасшифровку(ТаблицаРезультата, СтрокаПроверки.Идентификатор);
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПроверитьОстаткиСчета19()

Функция ПроверитьОстаткиСчета41(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляСчетовУчетамТМЦ();
	
	Запрос.УстановитьПараметр("СчетРодитель", ПланыСчетов.Хозрасчетный.НайтиПоКоду("41"));
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьРасшифровку(ТаблицаРезультата, СтрокаПроверки.Идентификатор);
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПроверитьОстаткиСчета41()

Функция ПроверитьОстаткиСчета60(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНа6001.Субконто1 КАК Контрагент,
	|	""Возможно, незачтенные авансы"" КАК ОписаниеОшибки,
	|	ОстаткиНа6001.Субконто1 КАК Субконто1,
	|	ОстаткиНа6001.Счет.Родитель КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет6002, , Организация = &Организация) КАК ОстаткиНа6002
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет6001, , Организация = &Организация) КАК ОстаткиНа6001
	|		ПО ОстаткиНа6002.Субконто1 = ОстаткиНа6001.Субконто1
	|ГДЕ
	|	ОстаткиНа6002.СуммаОстатокДт > 0
	|	И ОстаткиНа6001.СуммаОстатокКт > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	""Отрицательный остаток на активном субсчете"",
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет.Родитель
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет6002, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	""Отрицательные остаток на пассивном субсчете"",
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет.Родитель
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет6001, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт < 0";
	
	Запрос.УстановитьПараметр("Счет6001", ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01"));
	Запрос.УстановитьПараметр("Счет6002", ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02"));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Период", ПараметрыОтчета.КонецПериода);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьРасшифровку(ТаблицаРезультата, СтрокаПроверки.Идентификатор);
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПроверитьОстаткиСчета60()

Функция ПроверитьОстаткиСчета62(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиНа6201.Субконто1 КАК Контрагент,
	|	""Возможно, незакрытые авансы"" КАК ОписаниеОшибки,
	|	ОстаткиНа6201.Субконто1 КАК Субконто1,
	|	ОстаткиНа6201.Счет.Родитель КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет6202, , Организация = &Организация) КАК ОстаткиНа6202
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет6201, , Организация = &Организация) КАК ОстаткиНа6201
	|		ПО ОстаткиНа6202.Субконто1 = ОстаткиНа6201.Субконто1
	|ГДЕ
	|	ОстаткиНа6201.СуммаОстатокДт > 0
	|	И ОстаткиНа6202.СуммаОстатокКт > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	""Отрицательные остатки на активном субсчете"",
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет.Родитель
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет6201, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	""Отрицательный остатки на пассивном субсчете"",
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет.Родитель
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет = &Счет6202, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт < 0";
	
	Запрос.УстановитьПараметр("Счет6201", ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01"));
	Запрос.УстановитьПараметр("Счет6202", ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Период", ПараметрыОтчета.КонецПериода);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьРасшифровку(ТаблицаРезультата, СтрокаПроверки.Идентификатор);
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ПроверитьОстаткиСчета62()

Функция ПроверитьОстаткиСчета6802(СтрокаПроверки, ПараметрыОтчета)
	
	// Получаем последнюю за период декларацию по НДС
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентированныйОтчет.НаименованиеОтчета КАК НаименованиеОтчета,
	|	РегламентированныйОтчет.ДатаНачала КАК ДатаНачала,
	|	РегламентированныйОтчет.ДатаОкончания КАК ДатаОкончания,
	|	РегламентированныйОтчет.Вид КАК Вид,
	|	РегламентированныйОтчет.ДанныеОтчета КАК ДанныеОтчета
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.ИсточникОтчета = ""РегламентированныйОтчетНДС""
	|	И РегламентированныйОтчет.ПометкаУдаления = ЛОЖЬ
	|	И РегламентированныйОтчет.ДатаНачала = &НачалоПериода
	|	И РегламентированныйОтчет.ДатаОкончания = &КонецПериода
	|	И РегламентированныйОтчет.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(ПараметрыОтчета.КонецПериода));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Есть декларации по НДС
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	Отчет =  Выборка.ДанныеОтчета.Получить();
	
	// Успешно прочитали декларацию по НДС
	Если Отчет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КнигаПродажПоОтчету = Отчет.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.П000300001005;
	КнигаПокупокПоОтчету = Отчет.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3.П000300019003;
	
	// Книга продаж по 68.02
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт.Родитель = &СчетДт90
	|				ИЛИ СчетДт.Родитель = &СчетДт91,
	|			,
	|			СчетКт = &СчетКт6802,
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	
	Запрос.УстановитьПараметр("СчетКт6802", ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.02"));
	Запрос.УстановитьПараметр("СчетДт90", ПланыСчетов.Хозрасчетный.НайтиПоКоду("90"));
	Запрос.УстановитьПараметр("СчетДт91", ПланыСчетов.Хозрасчетный.НайтиПоКоду("91"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	КнигаПродажПо6802 = Цел(Выборка.СуммаОборот);
	
	// Книга ппокупок по 68.02
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаОборот,
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			СчетДт = &СчетДт6802,
	|			,
	|			СчетКт.Родитель = &СчетКт76
	|				ИЛИ СчетКт.Родитель = &СчетКт19,
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 = &СубконтоДт1";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	
	Запрос.УстановитьПараметр("СчетДт6802", ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.02"));
	Запрос.УстановитьПараметр("СчетКт76", ПланыСчетов.Хозрасчетный.НайтиПоКоду("76"));
	Запрос.УстановитьПараметр("СчетКт19", ПланыСчетов.Хозрасчетный.НайтиПоКоду("19"));
	
	Запрос.УстановитьПараметр("СубконтоДт1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	КнигаПокупокПо6802 = Цел(Выборка.СуммаОборот);
	
	РазличиеКнигПокупок = КнигаПродажПоОтчету - КнигаПродажПо6802;
	РазличиеКнигПокупок = Макс(-РазличиеКнигПокупок, РазличиеКнигПокупок); // Модуль числа
	
	РазличиеКнигПродаж = КнигаПокупокПоОтчету - КнигаПокупокПо6802;
	РазличиеКнигПродаж = Макс(-РазличиеКнигПродаж, РазличиеКнигПродаж); // Модуль числа
	
	Возврат (РазличиеКнигПокупок < 10) И (РазличиеКнигПродаж < 10);
	
КонецФункции // ПроверитьОстаткиСчета6802()

Функция ПроверитьОстаткиСчета76АВ(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки6202.Субконто1 КАК Контрагент,
	|	ВЫБОР
	|		КОГДА Остатки6202.СуммаОстатокКт - Остатки76АВ.СуммаОстатокДт * 6 > 0
	|			ТОГДА Остатки6202.СуммаОстатокКт - Остатки76АВ.СуммаОстатокДт * 6
	|		ИНАЧЕ -1 * (Остатки6202.СуммаОстатокКт - Остатки76АВ.СуммаОстатокДт * 6)
	|	КОНЕЦ КАК Сумма,
	|	""Сумма остатков на 76АВ / 120 * 20 меньше, чем сумма авансов на 62.02, возможно, не были выписаны авансовые счет-фактуры"" КАК ОписаниеОшибки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет6202, , Организация = &Организация) КАК Остатки6202
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет76АВ, , Организация = &Организация) КАК Остатки76АВ
	|		ПО (Остатки6202.Субконто1 = Остатки76АВ.Субконто1)
	|ГДЕ
	|	Остатки6202.СуммаОстатокКт > 0
	|	И Остатки76АВ.СуммаОстатокДт > 0
	|	И ВЫБОР
	|			КОГДА Остатки6202.СуммаОстатокКт - Остатки76АВ.СуммаОстатокДт * 6 > 0
	|				ТОГДА Остатки6202.СуммаОстатокКт - Остатки76АВ.СуммаОстатокДт * 6
	|			ИНАЧЕ -1 * (Остатки6202.СуммаОстатокКт - Остатки76АВ.СуммаОстатокДт * 6)
	|		КОНЕЦ > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	""Отрицательные остатки на активном счете""
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет76АВ, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки76АВ.Субконто1,
	|	Остатки76АВ.СуммаОстатокДт * 6 - Остатки6202.СуммаОстатокКт,
	|	""Сумма остатков на 76АВ / 120 * 20 больше, чем сумма авансов на 62.02, возможно, не были зачтены выданные авансы""
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет76АВ, , Организация = &Организация) КАК Остатки76АВ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет6202, , Организация = &Организация) КАК Остатки6202
	|		ПО (Остатки6202.Субконто1 = Остатки76АВ.Субконто1)
	|ГДЕ
	|	Остатки6202.СуммаОстатокКт > 0
	|	И Остатки76АВ.СуммаОстатокДт > 0
	|	И Остатки76АВ.СуммаОстатокДт * 6 - Остатки6202.СуммаОстатокКт > 1";
	
	Запрос.УстановитьПараметр("Счет76АВ", ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.АВ"));
	Запрос.УстановитьПараметр("Счет6202", ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02"));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода) + 1);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПроверитьОстаткиСчета76АВ()

Функция ПроверитьОстаткиСчета76ВА(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма,
	|	""Отрицательный остаток"" КАК ОписаниеОшибки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет76ВА, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Остатки76ВА.Субконто1,
	|	Остатки76ВА.СуммаОстатокКт * 6 - Остатки6002.СуммаОстатокДт,
	|	""Принятых к вычету авансов от поставщика больше, чем не закрытых авансов на 60.02""
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет76ВА, , Организация = &Организация) КАК Остатки76ВА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &Счет6002, , Организация = &Организация) КАК Остатки6002
	|		ПО (Остатки76ВА.Субконто1 = Остатки6002.Субконто1)
	|ГДЕ
	|	Остатки76ВА.СуммаОстатокКт > 0
	|	И Остатки6002.СуммаОстатокДт > 0
	|	И Остатки76ВА.СуммаОстатокКт * 6 - Остатки6002.СуммаОстатокДт > 1";
	
	Запрос.УстановитьПараметр("Счет76ВА", ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.ВА"));
	Запрос.УстановитьПараметр("Счет6002", ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02"));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода) + 1);
	
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции // ПроверитьОстаткиСчета76АВ()

Функция ПроверитьОстаткиВзаиморасчетов(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3
	|ПОМЕСТИТЬ ОстаткиРасчетов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиРасчетов.Субконто1 КАК Контрагент,
	|	СУММА(ОстаткиРасчетов.СуммаОстатокДт) КАК Дебет,
	|	СУММА(ОстаткиРасчетов.СуммаОстатокКт) КАК Кредит
	|ПОМЕСТИТЬ ОстаткиРасчетовГруппировка
	|ИЗ
	|	ОстаткиРасчетов КАК ОстаткиРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиРасчетов.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ОстаткиРасчетовГруппировка.Контрагент) КАК КонтрагентПредставление,
	|	ОстаткиРасчетовГруппировка.Контрагент КАК Контрагент,
	|	ОстаткиРасчетовГруппировка.Дебет КАК Дебет,
	|	ОстаткиРасчетовГруппировка.Кредит КАК Кредит
	|ИЗ
	|	ОстаткиРасчетовГруппировка КАК ОстаткиРасчетовГруппировка
	|ГДЕ
	|	ОстаткиРасчетовГруппировка.Дебет > 0
	|	И ОстаткиРасчетовГруппировка.Кредит > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дебет УБЫВ,
	|	Кредит УБЫВ";
	
	Запрос.УстановитьПараметр("Счета", МониторРуководителя.СчетаРасчетовСКонтрагентами(1));
	Запрос.УстановитьПараметр("Период", КонецДня(ПараметрыОтчета.КонецПериода) + 1);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить(); 
	
КонецФункции // ПроверитьОстаткиСчета76АВ()

// Раздел "Первичные документы" 

Функция ПроверитьНаличиеНепроведенныхДокументов(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос; 
	
	ДокументыНеТребующиеПерепроведения = Обработки.ГрупповоеПерепроведениеДокументов.ИсключаемыеИзПерепроведенияДокументыБезусловно();
	Для каждого ДокументИсключение Из Обработки.ГрупповоеПерепроведениеДокументов.ИсключаемыеИзПерепроведенияДокументыОпционально() Цикл
		ДокументыНеТребующиеПерепроведения.Вставить(ДокументИсключение.Ключ, ДокументИсключение.Значение);
	КонецЦикла;
	
	// Не требуют проведения
	ДокументыНеТребующиеПерепроведения.Вставить("АктСверкиВзаиморасчетов");
	ДокументыНеТребующиеПерепроведения.Вставить("РегламентнаяОперация");
	ДокументыНеТребующиеПерепроведения.Вставить("ОперацияБух");
	ДокументыНеТребующиеПерепроведения.Вставить("Доверенность");
	ДокументыНеТребующиеПерепроведения.Вставить("РегламентированныйОтчет");
	ДокументыНеТребующиеПерепроведения.Вставить("УведомлениеОбИсчисленныхСуммахНалогов");
	ДокументыНеТребующиеПерепроведения.Вставить("УведомлениеОСпецрежимахНалогообложения");
	// Конец не требуют проведения
	
	Для каждого Документ Из Метаданные.Документы Цикл
		
		// Отсекаем документы, которые не следует перепроводить
		Если ДокументыНеТребующиеПерепроведения.Свойство(Документ.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		// Отсекаем документы, которые не имеют реквизит "Организация"
		Если Документ.Реквизиты.Найти("Организация") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидДок = Документ.Имя;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Запрос.Текст = Запрос.Текст + "
			|
			|    ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|    ВЫБРАТЬ ПРЕДСТАВЛЕНИЕ(" + ВидДок + ".Ссылка) КАК ДокументПредставление,
		|    " + ВидДок + ".Ссылка КАК Документ
		|    ИЗ
		|        Документ." + ВидДок + " КАК " + ВидДок + "
		|    ГДЕ
		|        НЕ "  + ВидДок + ".Проведен
		|      И НЕ "  + ВидДок + ".ПометкаУдаления
		|      И "     + ВидДок + ".Организация = &Организация
		|      И "     + ВидДок + ".Дата >= &НачалоПериода
		|      И "     + ВидДок + ".Дата <= &КонецПериода";
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить(); 
	
КонецФункции // ПроверитьНаличиеНепроведенныхДокументов()

Функция ПроверитьПоступлениеТоваровИУслуг(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Контрагент) КАК КонтрагентПредставление,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.ОписаниеОшибки КАК ОписаниеОшибки,
	|	ВложенныйЗапрос.ДатаВходящегоДокумента КАК Дата,
	|	ВложенныйЗапрос.НомерВходящегоДокумента КАК Номер,
	|	NULL КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеТоваровУслуг.Ссылка) КАК КоличествоДублей,
	|		ПоступлениеТоваровУслуг.Организация КАК Организация,
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|		ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|		ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|		""Совпадают номер и дата входящего документа"" КАК ОписаниеОшибки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|		И ПоступлениеТоваровУслуг.Дата >= &НачалоПериода
	|		И ПоступлениеТоваровУслуг.Дата <= &КонецПериода
	|		И ПоступлениеТоваровУслуг.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Организация,
	|		ПоступлениеТоваровУслуг.Контрагент,
	|		ПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|		ПоступлениеТоваровУслуг.ДатаВходящегоДокумента) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоДублей > 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Контрагент),
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ОписаниеОшибки,
	|	ВложенныйЗапрос.ДатаВходящегоДокумента,
	|	NULL,
	|	ВложенныйЗапрос.СуммаДокумента
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеТоваровУслуг.Ссылка) КАК КоличествоДублей,
	|		ПоступлениеТоваровУслуг.Организация КАК Организация,
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|		ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|		ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|		""Совпадает дата входящего и сумма"" КАК ОписаниеОшибки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Дата >= &НачалоПериода
	|		И ПоступлениеТоваровУслуг.Дата <= &КонецПериода
	|		И ПоступлениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|		И ПоступлениеТоваровУслуг.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПоступлениеТоваровУслуг.Организация,
	|		ПоступлениеТоваровУслуг.Контрагент,
	|		ПоступлениеТоваровУслуг.ДатаВходящегоДокумента,
	|		ПоступлениеТоваровУслуг.СуммаДокумента) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.КоличествоДублей > 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сумма УБЫВ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПроверитьОстаткиСчета10()

Функция ПроверитьСчетФактураПолученный(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураПолученныйДокументыОснования.ДокументОснование) КАК Количество,
	|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Документ,
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование.СуммаДокумента КАК СуммаДокумента,
	|	""Несколько документов с одной суммой в основании счет-фактуры. Ситуация возможная, но редко используемая"" КАК ОписаниеОшибки
	|ПОМЕСТИТЬ Проверка1
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Дата >= &НачалоПериода
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.Дата <= &КонецПериода
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.Организация = &Организация
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование.СуммаДокумента
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураПолученныйДокументыОснования.ДокументОснование) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СчетФактураПолученный.НДСПредъявленКВычету
	|			ТОГДА ""К вычету принимается НДС по счет-фактуре, дата которой более 3 лет""
	|		ИНАЧЕ ""Входящая дата документа более 3 лет""
	|	КОНЕЦ КАК ОписаниеОшибки,
	|	СчетФактураПолученный.Ссылка КАК Документ
	|ПОМЕСТИТЬ Проверка2
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Дата >= &НачалоПериода
	|	И СчетФактураПолученный.Дата <= &КонецПериода
	|	И СчетФактураПолученный.Организация = &Организация
	|	И РАЗНОСТЬДАТ(КОНЕЦПЕРИОДА(СчетФактураПолученный.ДатаВходящегоДокумента, КВАРТАЛ), КОНЕЦПЕРИОДА(СчетФактураПолученный.Дата, КВАРТАЛ), КВАРТАЛ) > 12
	|	И СчетФактураПолученный.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Отличается номер счет-фактуры и документа поступление товаров и услуг"" КАК ОписаниеОшибки,
	|	СчетФактураПолученный.Ссылка КАК Документ
	|ПОМЕСТИТЬ Проверка3
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Дата >= &НачалоПериода
	|	И СчетФактураПолученный.Дата <= &КонецПериода
	|	И СчетФактураПолученный.Организация = &Организация
	|	И ТИПЗНАЧЕНИЯ(СчетФактураПолученный.ДокументОснование) = ТИП(Документ.ПоступлениеТоваровУслуг)
	|	И СОКРЛП(СчетФактураПолученный.ДокументыОснования.ДокументОснование.НомерВходящегоДокумента) <> СОКРЛП(СчетФактураПолученный.НомерВходящегоДокумента)
	|	И СчетФактураПолученный.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Проверка1.Документ.Контрагент) КАК КонтрагентПредставление,
	|	Проверка1.Документ.Контрагент КАК Контрагент,
	|	Проверка1.Документ КАК СчетФактура,
	|	ПРЕДСТАВЛЕНИЕ(Проверка1.Документ) КАК СчетФактураПредставление,
	|	Проверка1.ОписаниеОшибки КАК ОписаниеОшибки
	|ИЗ
	|	Проверка1 КАК Проверка1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Проверка2.Документ.Контрагент),
	|	Проверка2.Документ.Контрагент,
	|	Проверка2.Документ,
	|	ПРЕДСТАВЛЕНИЕ(Проверка2.Документ),
	|	Проверка2.ОписаниеОшибки
	|ИЗ
	|	Проверка2 КАК Проверка2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Проверка3.Документ.Контрагент),
	|	Проверка3.Документ.Контрагент,
	|	Проверка3.Документ,
	|	ПРЕДСТАВЛЕНИЕ(Проверка3.Документ),
	|	Проверка3.ОписаниеОшибки
	|ИЗ
	|	Проверка3 КАК Проверка3
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	СчетФактура";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПроверитьСчетФактураПолученный()

Функция ПроверитьСчетФактураВыданный(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(СчетФактураВыданныйДокументыОснования.ДокументОснование) КАК РеализацияПредставление,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Реализация,
	|	""Отличается номер реализации и счет-фактуры"" КАК ОписаниеОшибки,
	|	ПРЕДСТАВЛЕНИЕ(СчетФактураВыданныйДокументыОснования.Ссылка) КАК СчетФактураПредставление,
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура
	|ПОМЕСТИТЬ Проверка1
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТИПЗНАЧЕНИЯ(СчетФактураВыданныйДокументыОснования.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
	|	И (ВЫРАЗИТЬ(ПРАВ(СОКРЛП(СчетФактураВыданныйДокументыОснования.ДокументОснование.Номер), 6) КАК СТРОКА(6))) <> (ВЫРАЗИТЬ(ПРАВ(СОКРЛП(СчетФактураВыданныйДокументыОснования.Ссылка.Номер), 6) КАК СТРОКА(6)))
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Организация = &Организация
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(СчетФактураВыданныйДокументыОснования.ДокументОснование) КАК РеализацияПредставление,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Реализация,
	|	""Отличается дата реализации и счет-фактуры"" КАК ОписаниеОшибки,
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	|	ПРЕДСТАВЛЕНИЕ(СчетФактураВыданныйДокументыОснования.Ссылка) КАК СчетФактураПредставление
	|ПОМЕСТИТЬ Проверка2
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТИПЗНАЧЕНИЯ(СчетФактураВыданныйДокументыОснования.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
	|	И НЕ НАЧАЛОПЕРИОДА(СчетФактураВыданныйДокументыОснования.ДокументОснование.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(СчетФактураВыданныйДокументыОснования.Ссылка.Дата, ДЕНЬ)
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.Организация = &Организация
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проверка1.ОписаниеОшибки КАК ОписаниеОшибки,
	|	Проверка1.РеализацияПредставление КАК РеализацияПредставление,
	|	Проверка1.Реализация КАК Реализация,
	|	Проверка1.СчетФактураПредставление КАК СчетФактураПредставление,
	|	Проверка1.СчетФактура КАК СчетФактура
	|ИЗ
	|	Проверка1 КАК Проверка1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проверка2.ОписаниеОшибки,
	|	Проверка2.РеализацияПредставление,
	|	Проверка2.Реализация,
	|	Проверка2.СчетФактураПредставление,
	|	Проверка2.СчетФактура
	|ИЗ
	|	Проверка2 КАК Проверка2";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПроверитьСчетФактураВыданный()

// Раздел "Справочники"

Функция ПроверитьДублиНоменклатуры(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Наименование КАК Наименование,
	|	""Несколько позиций с одинаковым наименованием"" КАК ОписаниеОшибки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСоздания,
	|	МАКСИМУМ(Номенклатура.Ссылка) КАК Справочник
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Наименование
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Номенклатура.Ссылка) > 1";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Результат = Таблица.СкопироватьКолонки();
	
	Для Каждого Строка Из Таблица Цикл
		
		Строка.ДатаСоздания = ДатаСозданияСсылки(Строка.Справочник);
		
		Если Строка.ДатаСоздания > ПараметрыОтчета.НачалоПериода И Строка.ДатаСоздания < ПараметрыОтчета.КонецПериода Тогда
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Сортировать("ДатаСоздания УБЫВ");
	
	Возврат Результат
	
	
КонецФункции // ПроверитьДублиДоговоров()

Функция ПроверитьДублиКонтрагентов(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.ИНН КАК ИНН
	|ПОМЕСТИТЬ ДублиИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ИНН = """"
	|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.ИНН
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(Контрагенты.Ссылка) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Ссылка КАК КонтрагентПредставление,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ОписаниеОшибки,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСоздания
	|ПОМЕСТИТЬ СписокКандидатов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В
	|			(ВЫБРАТЬ
	|				ДублиИНН.ИНН КАК ИНН
	|			ИЗ
	|				ДублиИНН КАК ДублиИНН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДублиКПП.КПП = """"
	|			ТОГДА 1
	|		ИНАЧЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДублиКПП.Контрагент)
	|	КОНЕЦ КАК КоличествоДублей,
	|	СписокКандидатов.Контрагент КАК Контрагент,
	|	СписокКандидатов.КонтрагентПредставление КАК КонтрагентПредставление,
	|	СписокКандидатов.ИНН КАК ИНН,
	|	СписокКандидатов.КПП КАК КПП,
	|	СписокКандидатов.ОписаниеОшибки КАК ОписаниеОшибки,
	|	СписокКандидатов.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	СписокКандидатов КАК СписокКандидатов
	|		ПОЛНОЕ СОЕДИНЕНИЕ СписокКандидатов КАК ДублиКПП
	|		ПО СписокКандидатов.ИНН = ДублиКПП.ИНН
	|			И СписокКандидатов.КПП = ДублиКПП.КПП
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокКандидатов.Контрагент,
	|	СписокКандидатов.КонтрагентПредставление,
	|	СписокКандидатов.ИНН,
	|	СписокКандидатов.КПП,
	|	СписокКандидатов.ОписаниеОшибки,
	|	СписокКандидатов.ДатаСоздания,
	|	ДублиКПП.КПП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Таблица = РезультатЗапроса.Выгрузить();
	
	Результат = Таблица.СкопироватьКолонки();

	Для Каждого Строка Из Таблица Цикл
		
		Если Строка.КоличествоДублей > 1 Тогда
			Строка.ОписаниеОшибки = "С таким ИНН и КПП есть контрагенты";
		КонецЕсли;
		
		ТекущееСохраненноеСостояниеКонтрагента = ПроверкаКонтрагентовВызовСервера.ТекущееСохраненноеСостояниеКонтрагента(Строка.Контрагент, Строка.ИНН, Строка.КПП);
 
		Если НЕ ТекущееСохраненноеСостояниеКонтрагента = Перечисления.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС Тогда
			Строка.ОписаниеОшибки = Строка.ОписаниеОшибки + Символы.ПС + ТекущееСохраненноеСостояниеКонтрагента; 
		КонецЕсли;
		
		Строка.ДатаСоздания = ДатаСозданияСсылки(Строка.Контрагент);
		
		Если НЕ ПустаяСтрока(Строка.ОписаниеОшибки) И (Строка.ДатаСоздания > ПараметрыОтчета.НачалоПериода И Строка.ДатаСоздания < ПараметрыОтчета.КонецПериода) Тогда
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Сортировать("ДатаСоздания УБЫВ");
	
	Возврат Результат;
	
КонецФункции // ПроверитьДублиКонтрагентов()

Функция ПроверитьДублиДоговоров(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец КАК Владелец,
	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоговорыКонтрагентов.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Владелец,
	|	ДоговорыКонтрагентов.ВидДоговора,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоговорыКонтрагентов.Ссылка) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(ДоговорыКонтрагентов.Владелец) КАК КонтрагентПредставление,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ПРЕДСТАВЛЕНИЕ(ДоговорыКонтрагентов.Ссылка) КАК ДоговорПредставление,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСоздания
	|ИЗ
	|	ВТ КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ.Владелец = ДоговорыКонтрагентов.Владелец
	|			И ВТ.ВидДоговора = ДоговорыКонтрагентов.ВидДоговора
	|			И ВТ.ВалютаВзаиморасчетов = ДоговорыКонтрагентов.ВалютаВзаиморасчетов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Таблица = РезультатЗапроса.Выгрузить();
	
	Результат = Таблица.СкопироватьКолонки();
	
	Для Каждого Строка Из Таблица Цикл
		
		Строка.ДатаСоздания = ДатаСозданияСсылки(Строка.Договор);
		
		Если Строка.ДатаСоздания > ПараметрыОтчета.НачалоПериода И Строка.ДатаСоздания < ПараметрыОтчета.КонецПериода Тогда
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Сортировать("ДатаСоздания УБЫВ");
	
	Возврат Результат;
	
КонецФункции // ПроверитьДублиДоговоров()

// Вспомогатальные

Функция ДатаСозданияСсылки(Ссылка)
    ГУИД = Ссылка.УникальныйИдентификатор();
    Строка16 = Сред(ГУИД, 16, 3) + Сред(ГУИД, 10, 4) + Сред(ГУИД, 1, 8);
    Разрядность = СтрДлина(Строка16);
    ЧислоСек = 0;
    Для Позиция = 1 По Разрядность Цикл
        ЧислоСек = ЧислоСек + Найти("123456789abcdef",Сред(Строка16,Позиция,1))*Pow(16,Разрядность - Позиция);
    КонецЦикла;
    ЧислоСек = ЧислоСек / 10000000;
    Возврат Дата(1582, 10, 15, 04, 00, 00) + ЧислоСек;
КонецФункции

Функция ТекстЗапросаДляСчетовУчетамТМЦ()
	
	Возврат
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстатокДт КАК Количество,
	|	""Отрицательные остатки появившиеся в этом периоде"" КАК ОписаниеОшибки,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет.Родитель = &СчетРодитель, , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.КоличествоОборот < 0
	|	И ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстатокДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт,
	|	""Отрицательные остатки на конец периода"",
	|	ХозрасчетныйОстатки.Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет.Родитель = &СчетРодитель, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстатокДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт,
	|	""Наличие суммовых остатков при 0 количестве"",
	|	ХозрасчетныйОстатки.Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет.Родитель = &СчетРодитель, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстатокДт = 0
	|	И ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт,
	|	""Вид номенклатуры - услуги"",
	|	ХозрасчетныйОстатки.Субконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет.Родитель = &СчетРодитель, , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.КоличествоОстатокДт > 0
	|	И ХозрасчетныйОстатки.Субконто1.ВидНоменклатуры.Услуга = ИСТИНА"; 
	
КонецФункции // ТекстЗапросаДляСчетовУчетамТМЦ()

// Процедура - Заполняет колонку расшифровка для дальнейшего использования в расшифровке поля табличного документа
//
// Параметры:
//  ТаблицаРезультата - Таблица значения - Таблица с результатами проверки
//  Идентификатор	  - Строка - идентификатор строки проверки 
//
Процедура ЗаполнитьРасшифровку(ТаблицаРезультата, Идентификатор)
	
	// Добавим поле для расшифровки
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		
		ЕстьСубконто1 = ТаблицаРезультата.Колонки.Найти("Субконто1") <> Неопределено;
		ЕстьСубконто2 = ТаблицаРезультата.Колонки.Найти("Субконто2") <> Неопределено;
		ЕстьСубконто3 = ТаблицаРезультата.Колонки.Найти("Субконто3") <> Неопределено;
		
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", Идентификатор);
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", СтрокаТабРезультата.Счет);
			
			СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТабРезультата.Счет);
			
			Если ЕстьСубконто1 И ЗначениеЗаполнено(СтрокаТабРезультата.Субконто1) Тогда
				СтруктураОтбора = Новый Структура(); 
				СтруктураОтбора.Вставить("Субконто1", СтрокаТабРезультата.Субконто1);
				СтрокаТабРезультата.Расшифровка.Вставить("Отбор", СтруктураОтбора);
			КонецЕсли;
			
			Группировка = Новый Массив;
			
			Если ЕстьСубконто1 И ЗначениеЗаполнено(СтрокаТабРезультата.Субконто1) Тогда
				Структура = Новый Структура;
				Структура.Вставить("Поле",           "Субконто1");
				Структура.Вставить("Представление",  СвойстваСчета.ВидСубконто1Наименование);
				Структура.Вставить("Использование",  Истина);
				Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Иерархия);
				Группировка.Добавить(Структура);
			КонецЕсли;
			
			Если ЕстьСубконто2 И ЗначениеЗаполнено(СтрокаТабРезультата.Субконто2) Тогда
				Структура = Новый Структура;
				Структура.Вставить("Поле",           "Субконто2");
				Структура.Вставить("Представление",  СвойстваСчета.ВидСубконто2Наименование);
				Структура.Вставить("Использование",  Истина);
				Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Иерархия);
				Группировка.Добавить(Структура);
			КонецЕсли;
			
			Если ЕстьСубконто3 И ЗначениеЗаполнено(СтрокаТабРезультата.Субконто3) Тогда
				Структура = Новый Структура;
				Структура.Вставить("Поле",           "Субконто3");
				Структура.Вставить("Представление",  СвойстваСчета.ВидСубконто3Наименование);
				Структура.Вставить("Использование",  Истина);
				Структура.Вставить("ТипГруппировки", ТипГруппировкиКомпоновкиДанных.Иерархия);
				Группировка.Добавить(Структура);
			КонецЕсли;
			
			Если Группировка.Количество() Тогда
				СтрокаТабРезультата.Расшифровка.Вставить("Группировка", Группировка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти